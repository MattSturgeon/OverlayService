/* Generated by vala-dbus-binding-tool 1.0-aa2fb. Do not modify! */

using GLib;

namespace Freedesktop {

    [DBus (name = "org.freedesktop.DBus", timeout = 120000)]
    public interface DBus : GLib.Object {

        [DBus (name = "Hello")]
        public abstract string hello() throws DBusError, IOError;

        [DBus (name = "RequestName")]
        public abstract uint request_name(string name, uint flags) throws DBusError, IOError;

        [DBus (name = "ReleaseName")]
        public abstract uint release_name(string name) throws DBusError, IOError;

        [DBus (name = "StartServiceByName")]
        public abstract uint start_service_by_name(string name, uint flags) throws DBusError, IOError;

        [DBus (name = "UpdateActivationEnvironment")]
        public abstract void update_activation_environment(GLib.HashTable<string, string> environment) throws DBusError, IOError;

        [DBus (name = "NameHasOwner")]
        public abstract bool name_has_owner(string name) throws DBusError, IOError;

        [DBus (name = "ListNames")]
        public abstract string[] list_names() throws DBusError, IOError;

        [DBus (name = "ListActivatableNames")]
        public abstract string[] list_activatable_names() throws DBusError, IOError;

        [DBus (name = "AddMatch")]
        public abstract void add_match(string rule) throws DBusError, IOError;

        [DBus (name = "RemoveMatch")]
        public abstract void remove_match(string rule) throws DBusError, IOError;

        [DBus (name = "GetNameOwner")]
        public abstract string get_name_owner(string name) throws DBusError, IOError;

        [DBus (name = "ListQueuedOwners")]
        public abstract string[] list_queued_owners(string name) throws DBusError, IOError;

        [DBus (name = "GetConnectionUnixUser")]
        public abstract uint get_connection_unix_user(string bus_name) throws DBusError, IOError;

        [DBus (name = "GetConnectionUnixProcessID")]
        public abstract uint get_connection_unix_process_i_d(string bus_name) throws DBusError, IOError;

        [DBus (name = "GetAdtAuditSessionData")]
        public abstract uint8[] get_adt_audit_session_data(string bus_name) throws DBusError, IOError;

        [DBus (name = "GetConnectionSELinuxSecurityContext")]
        public abstract uint8[] get_connection_s_e_linux_security_context(string bus_name) throws DBusError, IOError;

        [DBus (name = "ReloadConfig")]
        public abstract void reload_config() throws DBusError, IOError;

        [DBus (name = "GetId")]
        public abstract string get_id() throws DBusError, IOError;

        [DBus (name = "GetConnectionCredentials")]
        public abstract GLib.HashTable<string, GLib.Variant> get_connection_credentials(string bus_name) throws DBusError, IOError;

        [DBus (name = "Features")]
        public abstract string[] features { owned get; }

        [DBus (name = "Interfaces")]
        public abstract string[] interfaces { owned get; }

        [DBus (name = "NameOwnerChanged")]
        public signal void name_owner_changed(string name, string old_owner, string new_owner);

        [DBus (name = "NameLost")]
        public signal void name_lost(string name);

        [DBus (name = "NameAcquired")]
        public signal void name_acquired(string name);

        [DBus (name = "ActivatableServicesChanged")]
        public signal void activatable_services_changed();
    }
}